package com.droidbrew.oodp.stategy;

public enum PayrollDay {
	MONDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours <= HOURS_PER_SHIFT ? 0 :
				(hours - HOURS_PER_SHIFT) * rate;
		}
	}, 
	TUESDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours <= HOURS_PER_SHIFT ? 0 :
				(hours - HOURS_PER_SHIFT) * rate;
		}
	}, 
	WEDNESDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours <= HOURS_PER_SHIFT ? 0 :
				(hours - HOURS_PER_SHIFT) * rate;
		}
	}, 
	THURSDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours <= HOURS_PER_SHIFT ? 0 :
				(hours - HOURS_PER_SHIFT) * rate;
		}
	}, 
	FRIDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours <= HOURS_PER_SHIFT ? 0 :
				(hours - HOURS_PER_SHIFT) * rate;
		}
	}, 
	SATURDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours*rate;
		}
	},
	SUNDAY {
		@Override
		protected double overtimePay(double hours, double rate) {
			return hours*rate;
		}
	};
	
	private enum PayType{
		WEEKDAY {
			@Override
			protected double overtimePay(double hours, double rate) {
				return hours <= HOURS_PER_SHIFT ? 0 :
					(hours - HOURS_PER_SHIFT) * rate;
			}
		},
		WEEKENDDAY {
			@Override
			protected double overtimePay(double hours, double rate) {
				return hours*rate;
			}
		};
		
		private static final int HOURS_PER_SHIFT = 8;

		public double pay(double hours, double rate) {
			if(hours < 0 || rate < 0 || hours > 24)
				return -1;
			return hours*rate + overtimePay(hours, rate);
		}

		
		abstract protected double overtimePay(double hours, double rate);
		
	}
	

}
